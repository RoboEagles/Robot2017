// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Robot2017.subsystems;

import org.usfirst.frc4579.Robot2017.RobotMap;
import org.usfirst.frc4579.Robot2017.commands.*;

import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class LaserDistanceSensor extends Subsystem {
	/*

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// To be used for storing the final distance value
	private int mmdistance = 0;
	private int inchesdistance = 0;
	
	// Defining registers that will be used
	private static final int REGISTER_LASER = 0x29;
	
	// Creating the laser object
	private I2C Laser = new I2C(I2C.Port.kOnboard, REGISTER_LASER);
	
	// Creating the buffer the info will be placed in
	private byte [] rawDistance = new byte[8];
	
	public void VL53L0X_I2C(byte deviceAdress){
		//Laser = new I2C(I2C.Port.kOnboard, REGISTER_LASER);
	}
	
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	public int mmtoinches(int num){
		x = num * 0.0393701;
		return x;
	}
	
	public void readLaser(){
		Laser.read(REGISTER_LASER, 8, rawDistance);
		mmdistance = (int)(rawDistance);
		inchesdistance = mmtoinches(mmdistance);
		System.out.Println("The raw distance is " + distance);
	}
	
	public void writeLaser(){
		Laser.write(REGISTER_LASER, 32);
	}
	public void init(){
		byte[] registerConfig = new byte[1];
		Laser.read(REGISTER_CONFIG, registerConfig.length, registerConfig);
	}
	*/
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

