// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Robot2017.subsystems;

import org.usfirst.frc4579.Robot2017.RobotMap;
import org.usfirst.frc4579.Vision.GripPipeline;
import org.usfirst.frc4579.Robot2017.commands.*;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;

import java.util.List;
import java.util.ArrayList; //I DONT KNOW WHY WE NEED TWO PACKAGES TO GET ONE THING BUT OOOOOOK
import java.util.Date;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.first.wpilibj.CameraServer;

import org.opencv.imgproc.Imgproc;
import org.opencv.core.*;

//import org.opencv.core.Mat;
//import org.opencv.core.MatOfPoint;

/**
 *
 */
public class Cam extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Relay light = RobotMap.camLight;
    private final SpeedController lightController = RobotMap.camLightController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private UsbCamera camObject;
    private CvSink cvSink;
    private CvSource cvSource;
    private GripPipeline myGripPipeline = new GripPipeline();
    private boolean isStarted = false;
    private boolean isProcessing = false;
    private ArrayList<MatOfPoint> contourList;
    private ArrayList<Rect> rectList = new ArrayList<>();
    
    private ArrayList<MatOfPoint> primaryContourList = new ArrayList<>();
	
    private Thread t;
    
    private Mat rawImage = new Mat();
	private Mat input = new Mat();
	private Mat output = new Mat();
	private Timer timer = new Timer();
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void startProcessing(){
    	contourList.clear();
    	System.out.println("Starting processing thread");
    	t = new Thread(() -> {
    		timer.start();
    		while (!Thread.interrupted()) {
				double start = timer.get();
	        	cvSink.grabFrame(rawImage);
	        	if (!rawImage.empty()) {
	    	    	rawImage.copyTo(input);
	    	    	myGripPipeline.process(input);
	    	    	output = myGripPipeline.hsvThresholdOutputPure();
	    	    	contourList = myGripPipeline.filterContoursOutput();
	    	    	rectList = myGripPipeline.filterContoursRect();
	    	    	Imgproc.drawContours(rawImage, contourList, -1, new Scalar(0,0,255,255), 2);
	    	    	//System.out.println("There are "+contourList.size()+" contours.");
	    	    	cvSource.putFrame(rawImage);
	        	} else {
	        		System.out.println("Mat image is empty!");
	        	}
	        	double end = timer.get();
	        	double elapsed = (end-start);
	        	//System.out.println("Elapsed time: "+elapsed);
	        	try {
	        		Thread.sleep(5);
	        	} catch (InterruptedException e) {
	        		return;
	        	}
        	}
    	});
    	t.start();
    	//Only process a frame if there are no frames being processed?
    }
    public void endProcessing () {
    	if (t.getState() == Thread.State.RUNNABLE) {
    		t.interrupt();
    	}
    }
    public void lightOn() {
    	lightController.set(1);
    }
    public void changeFPS(int framerate) {
    	//The framerate could be lowered when doing image processing, and raised while under driver control.
    	if(framerate > 30 || framerate < 1) {
    		framerate = 30;
    	}
    	camObject.setFPS(framerate);
    }
    public void initCamera() {
    	if (!isStarted) {
    		System.out.println("Starting the camera!");
    		isStarted = true;
    		//Starts the camera. THIS SHOULD BE CALLED EVEN IN AUTONOMOUS. getVideo() will NOT work without startAutomaticCapture or addServer().
        	camObject = CameraServer.getInstance().startAutomaticCapture();
        	camObject.setResolution(640, 480);
        	camObject.setFPS(24); // just because you set it at a fps doesn't mean it will run at that fps
        	//camObject.setBrightness(0);
        	camObject.setWhiteBalanceManual(0);
        	camObject.setExposureManual(-10);
        	cvSink = CameraServer.getInstance().getVideo();
        	cvSource = CameraServer.getInstance().putVideo("ContourVideo", 320, 240); //Only the streaming res is low
    	}
    }
    public void setPrimaryContours(ArrayList<MatOfPoint> list) {
    	primaryContourList = list;
    }
    public ArrayList<MatOfPoint> getPrimaryContours() {
    	return primaryContourList;
    }
    public ArrayList<MatOfPoint> getContours() {
    	return contourList;
    }
    public ArrayList<Rect> getRects() {
    	return rectList;
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	//setDefaultCommand(new Auto_PlaceGear("LEFT"));
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

