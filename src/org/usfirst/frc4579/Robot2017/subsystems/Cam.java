// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Robot2017.subsystems;

import org.usfirst.frc4579.Robot2017.RobotMap;
import org.usfirst.frc4579.Robot2017.commands.*;
import edu.wpi.first.wpilibj.Relay;

import edu.wpi.first.wpilibj.command.Subsystem;

import java.util.List;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.cscore.CvSink;
import edu.wpi.first.wpilibj.CameraServer;

import org.opencv.imgproc.Imgproc;
import org.opencv.core.*;

//import org.opencv.core.Mat;
//import org.opencv.core.MatOfPoint;

/**
 *
 */
public class Cam extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Relay light = RobotMap.camLight;
    private UsbCamera camObject;
    private CvSink cvSink;
    private boolean isStarted = false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void getCurrentContours(){
    	Mat still;
    	Mat blurOutput;
    	Mat hsvOutput;
    	List<MatOfPoint> contours;
    	
    	//cvSink.grabFrame(still);
    	//Imgproc.blur(still, blurOutput, new Size(5,5));
    	//Imgproc.cvtColor(blurOutput, hsvOutput, Imgproc.COLOR_BGR2HSV);
    	
    	//Imgproc.findContours(hsvoutput, contours, hierarchy, mode, method);
    	/* IMAGE PROCESSING PROCEDURE
    	 * 1. Blur image
    	 * 2. Convert image to HSV
    	 * 		a. Possibly modify HSV values based on proximity to a wall? Ultrasonic sensors?
    	 */
    }
    public void getRectangle(){
    	
    }
    public void changeFPS(int framerate) {
    	//The framerate could be lowered when doing image processing, and raised while under driver control.
    	if(framerate > 30 || framerate < 1) {
    		framerate = 30;
    	}
    	camObject.setFPS(framerate);
    }
    public void initCamera() {
    	if (!isStarted) {
    		isStarted = true;
    		//Starts the camera. THIS SHOULD BE CALLED EVEN IN AUTONOMOUS. getVideo() will NOT work without startAutomaticCapture or addServer().
        	camObject = CameraServer.getInstance().startAutomaticCapture();
        	camObject.setResolution(320, 240);
        	camObject.setFPS(15);
        	cvSink = CameraServer.getInstance().getVideo();
    	}
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	setDefaultCommand(new Auto_DriveToPeg1());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

