// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Robot2017.subsystems;

import org.usfirst.frc4579.Robot2017.RobotMap;
import org.usfirst.frc4579.Vision.GripPipeline;
import org.usfirst.frc4579.Robot2017.commands.*;
import edu.wpi.first.wpilibj.Relay;

import edu.wpi.first.wpilibj.command.Subsystem;

import java.util.List;
import java.util.ArrayList; //I DONT KNOW WHY WE NEED TWO PACKAGES TO GET ONE THING BUT OOOOOOK
import edu.wpi.cscore.UsbCamera;
import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.first.wpilibj.CameraServer;

import org.opencv.imgproc.Imgproc;
import org.opencv.core.*;

//import org.opencv.core.Mat;
//import org.opencv.core.MatOfPoint;

/**
 *
 */
public class Cam extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Relay light = RobotMap.camLight;
    private UsbCamera camObject;
    private CvSink cvSink;
    private CvSource cvSource;
    private GripPipeline myGripPipeline = new GripPipeline();
    private boolean isStarted = false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void getCurrentContours(){
    	/* IMAGE PROCESSING PROCEDURE
    	 * 1. Blur image
    	 * 2. Convert image to HSV
    	 * 		a. Possibly modify HSV values based on proximity to a wall? Ultrasonic sensors?
    	 */
    	Mat rawImage = new Mat();
    	Mat input = new Mat();
    	Mat output = new Mat();
    	ArrayList<MatOfPoint> contourList = new ArrayList<>();
    	
    	cvSink.grabFrame(rawImage);
    	rawImage.copyTo(input);
    	myGripPipeline.process(input);
    	output = myGripPipeline.hsvThresholdOutputPure();
    	
    	contourList = myGripPipeline.filterContoursOutput();
    	Imgproc.drawContours(rawImage, contourList, -1, new Scalar(0,255,0,255));
    	System.out.println("There are "+contourList.size()+" contours.");
    	cvSource.putFrame(rawImage);
    }
    public void getRectangle(){
    	
    }
    public void changeFPS(int framerate) {
    	//The framerate could be lowered when doing image processing, and raised while under driver control.
    	if(framerate > 30 || framerate < 1) {
    		framerate = 30;
    	}
    	camObject.setFPS(framerate);
    }
    public void initCamera() {
    	if (!isStarted) {
    		System.out.println("Starting the camera!");
    		isStarted = true;
    		//Starts the camera. THIS SHOULD BE CALLED EVEN IN AUTONOMOUS. getVideo() will NOT work without startAutomaticCapture or addServer().
        	camObject = CameraServer.getInstance().startAutomaticCapture();
        	camObject.setResolution(640, 480);
        	camObject.setFPS(3); // just because you set it at a fps doesn't mean it will run at that fps
        	//camObject.setBrightness(0);
        	camObject.setWhiteBalanceManual(0);
        	camObject.setExposureManual(0);
        	cvSink = CameraServer.getInstance().getVideo();
        	cvSource = CameraServer.getInstance().putVideo("Blur", 640, 480);
    	}
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	setDefaultCommand(new Auto_DriveToPeg1());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

