// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Robot2017.subsystems;

import org.usfirst.frc4579.Robot2017.RobotMap;
import org.usfirst.frc4579.Vision.GripPipeline;
import org.usfirst.frc4579.Robot2017.commands.*;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;

import java.util.List;
import java.util.ArrayList; //I DONT KNOW WHY WE NEED TWO PACKAGES TO GET ONE THING BUT OOOOOOK
import java.util.Date;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.first.wpilibj.CameraServer;

import org.opencv.imgproc.Imgproc;
import org.opencv.core.*;

//import org.opencv.core.Mat;
//import org.opencv.core.MatOfPoint;

/**
 *
 */
public class Cam extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Relay light = RobotMap.camLight;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private UsbCamera camObject;
    private CvSink cvSink;
    private CvSource cvSource;
    private GripPipeline myGripPipeline = new GripPipeline();
    private boolean isStarted = false;
    private boolean isProcessing = false;
    private ArrayList<MatOfPoint> contourList = new ArrayList<>();

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public Mat getCurrentContours(){
    	/* TO-DO
    	 * Camera streaming to the dashboard is not necessary.
    	 * Procedure for getting contours
    	 * - 1. Get contours(duh)
    	 * - 2. If there are two contours then return the contours
    	 * 
    	 */
    	if (!isProcessing) {
    		isProcessing = true;
    		//Raw image is only needed if you need to stream it to the dashboard
    		Mat rawImage = new Mat();
        	Mat input = new Mat();
        	Mat output = new Mat();
        	Timer timer = new Timer();
    		
    		timer.start();
			double start = timer.get();
        	cvSink.grabFrame(rawImage);
        	if (!rawImage.empty()) {
    	    	rawImage.copyTo(input);
    	    	myGripPipeline.process(input);
    	    	output = myGripPipeline.hsvThresholdOutputPure();
    	    	contourList = myGripPipeline.filterContoursOutput();
    	    	Imgproc.drawContours(rawImage, contourList, -1, new Scalar(255,0,0,255), 2);
    	    	//System.out.println("There are "+contourList.size()+" contours.");
    	    	cvSource.putFrame(rawImage);
        	} else {
        		System.out.println("Mat image is empty!");
        	}
        	double end = timer.get();
        	double elapsed = (end-start);
        	System.out.println("Elapsed time: "+elapsed);
        	
        	return contourList
    	}
    }
    public void findTapes(ArrayList<MatOfPoint> table){
    	double topArea1 = 0;
    	double topArea2 = 0;
    	MatOfPoint tape1;
    	MatOfPoint tape2;
    	for(MatOfPoint cnt:table) {
    		double area = Imgproc.contourArea(cnt);
    		if (area >= topArea1) {
    			tape1 = cnt;
    			topArea1 = area;
    		} else if (area >= topArea2) {
    			tape2 = cnt;
    			topArea2 = area;
    		}
    	}
    	//Imgproc.drawContours(rawImage, contourList, -1, new Scalar(0,255,0,255));
    }
    public void changeFPS(int framerate) {
    	//The framerate could be lowered when doing image processing, and raised while under driver control.
    	if(framerate > 30 || framerate < 1) {
    		framerate = 30;
    	}
    	camObject.setFPS(framerate);
    }
    public void initCamera() {
    	if (!isStarted) {
    		System.out.println("Starting the camera!");
    		isStarted = true;
    		//Starts the camera. THIS SHOULD BE CALLED EVEN IN AUTONOMOUS. getVideo() will NOT work without startAutomaticCapture or addServer().
        	camObject = CameraServer.getInstance().startAutomaticCapture();
        	camObject.setResolution(640, 480);
        	camObject.setFPS(10); // just because you set it at a fps doesn't mean it will run at that fps
        	//camObject.setBrightness(0);
        	camObject.setWhiteBalanceManual(0);
        	camObject.setExposureManual(-10);
        	cvSink = CameraServer.getInstance().getVideo();
        	cvSource = CameraServer.getInstance().putVideo("Blur", 640, 480);
    	}
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	setDefaultCommand(new Auto_DriveToPeg1());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

