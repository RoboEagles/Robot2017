// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Robot2017.subsystems;

import org.usfirst.frc4579.Robot2017.Robot;
import org.usfirst.frc4579.Robot2017.RobotMap;
import org.usfirst.frc4579.Robot2017.commands.*;

import org.usfirst.frc4579.classes.RobotDrive;
import org.usfirst.frc4579.filters.FirstOrderLPF;

import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.hal.HAL;
import edu.wpi.first.wpilibj.hal.FRCNetComm.tInstances;
import edu.wpi.first.wpilibj.hal.FRCNetComm.tResourceType;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
//public class DriveTrain extends PIDSubsystem {
public class DriveTrain extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController controllerLeft = RobotMap.driveTraincontrollerLeft;
    private final SpeedController controllerRight = RobotMap.driveTraincontrollerRight;
    //private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public int drive_direction = 1;
    public String pidMode = "rotate";
    public final double TURN_SPEED = 0.12;

    final double baseLine = 19.5; // inches
    
    private FirstOrderLPF vLeftLPF = new FirstOrderLPF(0.7);
    private FirstOrderLPF vRiteLPF = new FirstOrderLPF(0.7);

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public DriveTrain() {
    	super("DriveTrain", 2.0, 0.0, 0.0, 0.6);
		setAbsoluteTolerance(1.0);
		setInputRange(0.0, 360.0);
		setOutputRange(0.0,1.0);
		getPIDController().setContinuous(true);
		SmartDashboard.putData("PID Controller",getPIDController());
		SmartDashboard.putNumber("LEFT MOTOR OFFSET", 0.0);
		SmartDashboard.putNumber("RIGHT MOTOR SCALE FACTOR", 0.0);
    }
    
    protected static double limit(double num) {
        if (num > 1.0) {
          return 1.0;
        }
        if (num < -1.0) {
          return -1.0;
        }
        return num;
      }
    
    // Return true if the motors are commanded to zero.
    public boolean isNotMoving() {
    	return (controllerLeft.get() == 0.0) && (controllerRight.get() == 0.0);
    }
    
    public void joeyStickDrive() { //The finest drive code known to man.
		
    	//Read the gyro and the joystick.
		double gz = Robot.meas.getAngleRate();

		double frwd = -Robot.oi.joystick.getY();	//forward-back joystick, speed control.
		double turn = Robot.oi.joystick.getX();	    //left-right joystick, turn control.

		//Lower limits for the joystick, stop the motors.
		if (Math.abs(turn) < 0.04 && Math.abs(frwd) < 0.04) {
			turn = 0.0;
			frwd = 0.0;
			gz = 0.0;
		}
		
		//Decrease the low speed sensitivities of the joystick.
		double frwd2 = Math.signum(frwd) * Math.pow(Math.abs(frwd), 1.5);
		double turn2 = Math.signum(turn) * Math.pow(Math.abs(turn), 2.0);
		
		//Limit the control amount at high and low speeds, to avoid spinouts.
		double maxSens = 0.55;
		double minSens = 0.2;
		double sensitivity = maxSens - Math.abs(frwd2) * (maxSens - minSens);
		turn2 = turn2 * sensitivity;
		
		//Low pass filter the speed settings to the drive motors.
		double vLeft = vLeftLPF.filter(frwd2 + turn2 / 2.0);
		double vRite = vRiteLPF.filter(frwd2 - turn2 / 2.0);
		
		//Calculate the expected rotation rate.  93 in/sec (extrapolated full speed) converts the joystick 
		//numbers to an expected speed value. The final equation is omega = (SpeedRite - SpeedLeft)/baseline.  
		//omega is rotation in deg/sec.
		double omega = Math.toDegrees((vRite - vLeft) * 93.0 / baseLine); 
		
		//Calculate the two wheel correction factor.
		double correction  = (omega - gz) * 0.008 / 2.0;
		double vRite2 = vRite + correction;
		double vLeft2 = vLeft - correction;
		
		//Normalize the wheel speeds to stay within +/-1.0;
		double magMax = Math.max(Math.abs(vRite2), Math.abs(vLeft2));
		if (magMax > 1.0) {
			vRite2 /= magMax;
			vLeft2 /= magMax;
		}
		
		//Set the two motor speeds.
		controllerRight.set(vRite2);
		controllerLeft.set(vLeft2);
		
	}  
    
    // Drive each motor at the indicated speed.
    public void driveEachMotor (double leftMotorSpeed, double rightMotorSpeed) {
    	controllerLeft .set(leftMotorSpeed);
    	controllerRight.set(rightMotorSpeed);
    }
    
    /*
    public void drive() {
    	double x = Robot.oi.joystick.getX();//*drive_direction;
    	double y = Robot.oi.joystick.getY();//*drive_direction;
    	double xsign = Math.signum(x);
    	double ysign = Math.signum(y);
    	final double slider = Robot.oi.joystick.getRawAxis(2) / 2;
    	double sensitivity = 0.5 - slider;
    	//arcadeDriveCustom(x, y, true);
    	robotDrive.arcadeDrive(Math.pow(x*sensitivity, 2)*xsign/3, Math.pow(y*sensitivity, 2)*ysign*drive_direction, false);
    	SmartDashboard.putNumber("Joystick x-value", Robot.oi.joystick.getX());
    	SmartDashboard.putNumber("Joystick y-value", Robot.oi.joystick.getY());
    }
    */
    
    public void driveStraight(double speed) {
	    double halfCorrection = ((Robot.meas.getAngleRate() * .006) + (Robot.meas.getAngle() * .016)) /2.0;
	    Robot.driveTrain.driveEachMotor(speed + halfCorrection, speed - halfCorrection);
    }
    
    public void stop(){
    	controllerLeft.stopMotor();
    	controllerRight.stopMotor();
    }
    //These methods reverse the direction that the robot drives in.
    public void reverseDrive() {
    	System.out.println("Setting drive to reverse");
    	drive_direction = -1;
    }
    public void forwardDrive() {
    	System.out.println("Setting drive to forward");
    	drive_direction = 1;
    }
    
    //This method continuously turns the robot at a set speed.
    public void continuousTurn(String dir) {
    	if (dir == "left") {
    		driveEachMotor(-TURN_SPEED, TURN_SPEED);
    	} else if (dir == "right") {
    		driveEachMotor(TURN_SPEED, -TURN_SPEED); 
    	}
    }
    /*
     * PID DRIVETRAIN METHODS
     */
    
    public void setSetpoint(double point) {
    	getPIDController().setSetpoint(point);
    }
    public boolean isAtSetpoint() {
    	return getPIDController().onTarget();
    }
    //Enables the PID controller, this starts the PID controller.
    public void driveToSetpoint() {
    	if (!getPIDController().isEnabled()) {
    		getPIDController().enable();
    	}
    }
    //Enable the PID controller with a specified angle/distance. Overloaded method. Not sure I need this method though.
    public void driveToSetpoint(double angle) {
    	setSetpoint(angle);
    	if (!getPIDController().isEnabled()) {
    		if (pidMode == "drive") {
    		}
    		getPIDController().enable();
    	}
    }
    //Stops PID controller. Calls disable, resets error/integral term.
    public void stopDrivingToSetpoint() {
    	getPIDController().reset();
    }
    public void shiftPIDToDrive() {
    	if (!getPIDController().isEnabled()) {
    		pidMode = "drive";
    		getPIDController().reset();
    		getPIDController().setContinuous(false);
    		getPIDController().setInputRange(0, 30);
    		getPIDController().setPID(2.0, 0, 0, 0);
    		setAbsoluteTolerance(1.0);
    	} else {
    		System.out.println("Error: Can't shift, PIDController is busy.");
    	}
    }
    public void shiftPIDToRotate() {
    	if (!getPIDController().isEnabled()) {
    		pidMode = "rotate";
    		getPIDController().reset();
    		getPIDController().setContinuous(true);
    		getPIDController().setInputRange(0, 360);
    		getPIDController().setPID(2.0, 0, 0, 0.6);
    		setAbsoluteTolerance(1.0);
    	} else {
    		System.out.println("Error: Can't shift, PIDController is busy.");
    	}
    }
    public double returnPIDInput() {
    	double output = 0;
    	if (pidMode == "rotate") {
    		output = 90.0; //Robot.meas.getAngle() % 360;
    	} else if (pidMode == "drive") {

    	}
    	return output;
    }
    
    public void usePIDOutput(double output) {
    	throw new RuntimeException ("Not implemented.");
    	/*
    	if (pidMode == "rotate") {
    		robotDrive.tankDrive(output, -output);//left right respectively
    	} else if (pidMode == "drive") {
    		robotDrive.arcadeDrive(output, 0);
    	}
    	*/
    }
    
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DefaultDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
}
