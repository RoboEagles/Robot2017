// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Robot2017.subsystems;

import org.usfirst.frc4579.Robot2017.Robot;
import org.usfirst.frc4579.Robot2017.RobotMap;
import org.usfirst.frc4579.Robot2017.commands.*;

import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.hal.HAL;
import edu.wpi.first.wpilibj.hal.FRCNetComm.tInstances;
import edu.wpi.first.wpilibj.hal.FRCNetComm.tResourceType;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController controllerLeft = RobotMap.driveTraincontrollerLeft;
    private final SpeedController controllerRight = RobotMap.driveTraincontrollerRight;
    private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    private final Encoder encoder = RobotMap.driveTrainencoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public int drive_direction = 1;
    public String pidMode = "rotate";
    public final double TURN_SPEED = 0.12; //Used for continuousDrive();

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public DriveTrain() {
    	super("DriveTrain", 2.0, 0.0, 0.0, 0.6);// TODO: GET THIS DAMN THING TUNED
		setAbsoluteTolerance(1.0);
		setInputRange(0.0, 360.0); //If we need to get the PID for driving instead of rotating, we could possibly change this+ other things
		setOutputRange(0.0,1.0);
		encoder.setDistancePerPulse((3.14*(4.0/12.0))/360.0); //Circumference divided by 360 (or should it be 250?)
		getPIDController().setContinuous(true);
		SmartDashboard.putData("PID Controller",getPIDController());
    }
    protected static double limit(double num) {
        if (num > 1.0) {
          return 1.0;
        }
        if (num < -1.0) {
          return -1.0;
        }
        return num;
      }
    public void arcadeDriveCustom(double moveValue, double rotateValue, boolean squaredInputs) {
        // local variables to hold the computed PWM values for the motors
        double leftMotorSpeed;
        double rightMotorSpeed;

        moveValue = limit(moveValue);
        rotateValue = limit(rotateValue);

        if (squaredInputs) {
          // square the inputs (while preserving the sign) to increase fine control
          // while permitting full power
          if (moveValue >= 0.0) {
            moveValue = moveValue * moveValue;
          } else {
            moveValue = -(moveValue * moveValue);
          }
          if (rotateValue >= 0.0) {
            rotateValue = rotateValue * rotateValue;
          } else {
            rotateValue = -(rotateValue * rotateValue);
          }
        }

        if (moveValue > 0.0) {
          if (rotateValue > 0.0) {
            leftMotorSpeed = moveValue - rotateValue;
            rightMotorSpeed = Math.max(moveValue, rotateValue);
          } else {
            leftMotorSpeed = Math.max(moveValue, -rotateValue);
            rightMotorSpeed = moveValue + rotateValue;
          }
        } else {
          if (rotateValue > 0.0) {
            leftMotorSpeed = -Math.max(-moveValue, rotateValue);
            rightMotorSpeed = moveValue + rotateValue;
          } else {
            leftMotorSpeed = moveValue - rotateValue;
            rightMotorSpeed = -Math.max(-moveValue, -rotateValue);
          }
        }
        double leftMotorOffset = limit(SmartDashboard.getNumber("LEFT MOTOR OFFSET:", 0.0));
        driveEachMotor(limit(leftMotorSpeed+leftMotorOffset), limit(rightMotorSpeed));
      }
    // Return true if the motors are commanded to zero.
    public boolean isNotMoving() {
    	return (controllerLeft.get() == 0.0) && (controllerRight.get() == 0.0);
    }
    
    // Drive each motor at the indicated speed.
    public void driveEachMotor (double leftMotorSpeed, double rightMotorSpeed) {

    	controllerLeft .set(leftMotorSpeed);
    	controllerRight.set(rightMotorSpeed);
    	
    }
    
    public void drive() {
    	double x = Robot.oi.joystick.getX();//*drive_direction;
    	double y = Robot.oi.joystick.getY();//*drive_direction;
    	double xsign = Math.signum(x);
    	double ysign = Math.signum(y);
    	final double slider = Robot.oi.joystick.getRawAxis(2) / 2;
    	double sensitivity = 0.5 - slider;
    	//arcadeDriveCustom(x, y, true);
    	robotDrive.arcadeDrive(Math.pow(x*sensitivity, 2)*xsign, Math.pow(y*sensitivity, 2)*ysign*drive_direction, false);
    	//robotDrive.arcadeDrive(Math.pow(x*sensitivity, 2)*xsign, Math.pow(y*sensitivity, 2)*ysign);
    }
    // Turns the robot continuously either left or right. Speed may need to change.
    public void driveStraight() {
    	// To get the robot to drive straight, compute a correction based on z gyro angle rate and z angle.
	    // Apply half the correction to each wheel to make the middle of the robot move at the desired speed.
   //This equation is for the backup robot.
	    //double halfCorrection = ((Robot.meas.getAngleRate() * .01) + (Robot.meas.getAngle() * .02)) /2.0;
   //This equation is for the competition robot.
	    double halfCorrection = ((Robot.meas.getAngleRate() * .006) + (Robot.meas.getAngle() * .016)) /2.0;
	    Robot.driveTrain.driveEachMotor(0.2 + halfCorrection, 0.2 - halfCorrection);
    }
    public void stop(){
    	controllerLeft.stopMotor();
    	controllerRight.stopMotor();
    }
    //BACKWARDS DRIVE METHODS
    public void reverseDrive() {
    	System.out.println("Setting drive to reverse");
    	drive_direction = -1;
    }
    public void forwardDrive() {
    	System.out.println("Setting drive to forward");
    	drive_direction = 1;
    }
    //Returns the encoder distance in feet
    public void putEncoderDistance() {
    	SmartDashboard.putNumber("Encoder distance:", encoder.getDistance());
    }
    //PID methods
    public void continuousTurn(String dir) {
    	if (dir == "left") {
    		driveEachMotor(-TURN_SPEED, TURN_SPEED);
    	} else if (dir == "right") {
    		driveEachMotor(TURN_SPEED, -TURN_SPEED); 
    	}
    	//if left turn, LEFT:NEG, RIGHT:POS. if right turn, LEFT:POS, RIGHT:NEG.
    }
    //Sets the goal for the PID system to reach
    public void setSetpoint(double point) {
    	getPIDController().setSetpoint(point);
    }
    public boolean isAtSetpoint() {
    	return getPIDController().onTarget();
    }
    //Enables the PID controller, this starts the PID controller.
    public void driveToSetpoint() {
    	if (!getPIDController().isEnabled()) {
    		getPIDController().enable();
    	}
    }
    //Enable the PID controller with a specified angle/distance. Overloaded method. Not sure I need this method though.
    public void driveToSetpoint(double angle) {
    	setSetpoint(angle);
    	if (!getPIDController().isEnabled()) {
    		if (pidMode == "drive") {
    			encoder.reset();
    		}
    		getPIDController().enable();
    	}
    }
    //Stops PID controller. Calls disable, resets error/integral term.
    public void stopDrivingToSetpoint() {
    	getPIDController().reset();
    }
    public void shiftPIDToDrive() {
    	if (!getPIDController().isEnabled()) {
    		pidMode = "drive";
    		// I could probably set the PIDController method to a variable...if I weren't so paranoid...
    		getPIDController().reset();
    		getPIDController().setContinuous(false);
    		getPIDController().setInputRange(0, 30);
    		getPIDController().setPID(2.0, 0, 0, 0);
    		setAbsoluteTolerance(1.0);
    	} else {
    		System.out.println("Error: Can't shift, PIDController is busy.");
    	}
    }
    public void shiftPIDToRotate() {
    	if (!getPIDController().isEnabled()) {
    		pidMode = "rotate";
    		// I could probably set the PIDController method to a variable...if I weren't so paranoid...
    		getPIDController().reset();
    		getPIDController().setContinuous(true);
    		getPIDController().setInputRange(0, 360);
    		getPIDController().setPID(2.0, 0, 0, 0.6);
    		setAbsoluteTolerance(1.0);
    	} else {
    		System.out.println("Error: Can't shift, PIDController is busy.");
    	}
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DefaultDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public double returnPIDInput() {
    	double output = 0;
    	if (pidMode == "rotate") {
    		output = 90.0; //Robot.meas.getAngle() % 360; //Since setContinuous treats the beginning and end as the same, there isn't a problem with 359/1.
    	} else if (pidMode == "drive") {
    		output = encoder.pidGet();
    	}
    	return output;
    }
    public void usePIDOutput(double output) {
    	if (pidMode == "rotate") {
    		robotDrive.tankDrive(output, -output);//left right respectively
    	} else if (pidMode == "drive") {
    		robotDrive.arcadeDrive(output, 0);
    	}
    }
}
