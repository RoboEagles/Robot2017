// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Robot2017.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4579.Robot2017.Robot;
import org.opencv.core.*;
import org.usfirst.frc4579.instrumentation.FRCSmartDashboard;

import java.util.List;
import java.util.ArrayList; //I DONT KNOW WHY WE NEED TWO PACKAGES TO GET ONE THING BUT OOOOOOK
import java.util.Date;
import edu.wpi.first.wpilibj.Timer;

/**
 *
 */
public class FindPeg extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double brightness = 0;
	private ArrayList<MatOfPoint> contours = new ArrayList<>();
	private Timer timer = new Timer();
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public FindPeg() {
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.cam);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	System.out.println("Starting init processing");
    	Robot.cam.startProcessing();
    	timer.start();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() { //Ideally, this would use PID turning instead of constant turning. This is temporary code.
    	double currentTime = timer.get(); 
    	if (currentTime <= 2.0) {
    		Robot.driveTrain.continuousTurn("left"); //first search the left for tapes
    	} else if (currentTime <= 6.0) {
    		Robot.driveTrain.continuousTurn("right");//afterwards, return to centerpoint and search right
    	} else if (currentTime <= 8.0) {
    		Robot.driveTrain.continuousTurn("left"); //if you can't find anything, just return to centerpoint
    	} //After eight seconds, do nothing.
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	contours = Robot.cam.getContours();
    	if (contours.size() == 2) {
    		/* 
    		 *  At this point, if the two tapes are found, then the command ends and no more frames are updated.
    		 *  The next command will handle processing the tape.
    		 */
    		System.out.println("FOUND TWO TAPES!!!");
    		Robot.cam.endProcessing();
    		Robot.cam.setPrimaryContours(contours);
    		return true;
    	} else if (contours.size() == 1) {
    		return false;
    	} else {
    		return false;
    	}
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.stopDrivingToSetpoint();
    	Robot.cam.endProcessing();
    	timer.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
