// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Robot2017.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.Timer;
import org.usfirst.frc4579.instrumentation.FRCSmartDashboard;
import org.usfirst.frc4579.Robot2017.Robot;

import org.opencv.core.*;
import java.lang.Math;
import java.util.List;
import java.util.ArrayList;
import org.opencv.imgproc.Imgproc;

/**
 *
 */
public class FacePeg extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private ArrayList<MatOfPoint> contours = new ArrayList<>();
	private double centerX = -1;
	private double allowedError = 1;
	private boolean takingShot = false;
	private boolean snapshotReady = false;
	private boolean isFacingPeg = false;
	private double CAMERA_OFFSET = 0;
	private Timer timer = new Timer();
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public FacePeg() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.cam);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	timer.start();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if (timer.get() <= 0.5) { //let the robot stop moving first.
    		Robot.cam.takeSnapshot();
        	contours = Robot.cam.getPrimaryContours();
        	double errorInDegrees;
        	double camToPegDist;
        	//left is positive, right is negative
        	if (contours.size() == 2) {
    			errorInDegrees = Robot.cam.getErrorFromContours(contours.get(0),contours.get(1));
    			camToPegDist = Robot.cam.getDistance();
    			if (Math.abs(errorInDegrees) <= allowedError) { //If the error is small enough
    				System.out.println("The robot is facing the peg.");
    				Robot.cam.changeCameraToTeleop();
    				isFacingPeg = true;
    			} else { //Calculate the angle that you need to turn.
    				double c = 180 - errorInDegrees; //this is the angle of the PEG, CAMERA, and ROBOT CENTER. (Angle PCR)
    	    		double centerToPeg = Math.sqrt( Math.pow(CAMERA_OFFSET, 2) + Math.pow(camToPegDist, 2) - (2*CAMERA_OFFSET*camToPegDist*Math.cos(c)) ); //This is the law of cosines solving for the side opposite of angle c.
    	    		double finalTurnAngle = Math.asin( camToPegDist*Math.sin(c)/centerToPeg ); //This is the law of sines solving for the value of the angle opposite of distance PEG-ROBOTCENTER.
    	    		System.out.println("Degrees needed to rotate: "+ finalTurnAngle);
    	    		
    	    		//Begin rotating
    	    		Robot.driveTrain.driveToSetpoint(finalTurnAngle);
    			}
    		} else {
    			System.out.println("INIT FAILED: Cannot find 2 contours. There are " + contours.size() + " contours.");
    		}
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if (isFacingPeg || Robot.driveTrain.isAtSetpoint()) {
    		return true;
    	}
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.stopDrivingToSetpoint();
    	timer.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
