// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Robot2017.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4579.Robot2017.Robot;

import org.opencv.core.*;
import java.util.List;
import java.util.ArrayList;
import org.opencv.imgproc.Imgproc;

/**
 *
 */
public class FacePeg extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private ArrayList<MatOfPoint> contours = new ArrayList<>();
	private double centerX = -1;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public FacePeg() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.cam);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    private void findCenter(Rect leftRect, Rect rightRect) {
    	double leftBotRight = leftRect.br().x;
    	double rectGap = rightRect.tl().x - leftBotRight;
    	double pegPosition = leftBotRight + (rectGap/2);
    	double PIX_TO_DEG;
    }
    protected void initialize() {
    	contours = Robot.cam.getPrimaryContours();
    	Rect rect1 = Imgproc.boundingRect(contours.get(0));
    	Rect rect2 = Imgproc.boundingRect(contours.get(1));
    	if (rect1.tl().x < rect2.tl().x) { //If rect1 is 
    		// If rect1.x is smaller than rect2.x then rect1 is the left rect
    		findCenter(rect1,rect2);
    	} else if (rect1.tl().x > rect2.tl().x) {
    		//Rect 2 is smaller, and is the left one 
    		findCenter(rect2, rect1);
    	} 
    	//else if they are the same, call isFinished()?
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if (centerX == -1) {
    		return true;
    	}
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
